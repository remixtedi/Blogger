@page "/"
@using Blogger.App.ApiServices
@using Blogger.App.Components.Blogs
@using Blogger.Contracts.Models.Requests
@using Blogger.Contracts.Models.Responses

@inject IBloggerApiService BloggerApiService

<PageTitle>Home</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Height="100%" Width="100%" Square="true" Class="pa-3" Elevation="0">

        <MudPaper Class="pb-4" Elevation="0">
            <MudTextField OnAdornmentClick="SearchBlogs" OnBlur="SearchBlogs" @bind-Value="SearchText" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" />
        </MudPaper>
        
        @{
            if (filterBlogsResult == null)
            {
                <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
            }
            else
            {
                if (filterBlogsResult.Blogs.Any())
                {
                    <MudStack Spacing="10">
                        @foreach (var blog in filterBlogsResult.Blogs)
                        {
                            <BlogPreview Blog="blog"></BlogPreview>
                        }
                    </MudStack>
                    <MudPaper Class="mt-4" Elevation="0">
                        <div class="d-flex flex-column align-center">
                            <MudPagination SelectedChanged="PageChanged" Color="Color.Primary" Count="@((filterBlogsResult.TotalCount + filterBlogsResult.PageSize - 1) / filterBlogsResult.PageSize)"/>
                        </div>
                    </MudPaper>
                }
                else
                {
                    <MudText Typo="Typo.h6">No blogs found, click <MudLink Href="/add">here</MudLink> to add a new blog.</MudText>
                }
            }
        }

    </MudPaper>
</MudContainer>


@code {
    private FilterBlogsResult? filterBlogsResult;
    private int _page = 1;
    private readonly int _pageSize = 3;
    private string SearchText = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    
    private async Task PageChanged(int i)
    {
        _page = i;
        await LoadData();
    }
    private async Task LoadData(string? keywords = null)
    {
        var filter = new FilterBlogsRequest
        {
            Page = _page,
            PageSize = _pageSize,
            Keyword = keywords
        };

        filterBlogsResult = await BloggerApiService.GetBlogs(filter);
        _page = filterBlogsResult.Page;
    }

    private async Task SearchBlogs()
    {
        Console.WriteLine(SearchText);
        await LoadData(SearchText);
    }

}